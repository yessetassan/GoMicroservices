package db

import (
	"context"
	"github.com/jackc/pgx/v4/pgxpool"
	"log"
)

var dbPool *pgxpool.Pool

func InitDB() {
	connStr := "postgres://postgres:Qasaqayj7@localhost:5432/fix"
	config, err := pgxpool.ParseConfig(connStr)
	if err != nil {
		log.Fatalf("Unable to parse database configuration: %v", err)
	}

	dbPool, err = pgxpool.ConnectConfig(context.Background(), config)
	if err != nil {
		log.Fatalf("Unable to connect to database: %v", err)
	}

	createTables()
	log.Println("Database connection initialized.")
}

func GetDB() *pgxpool.Pool {
	return dbPool
}

func createTables() {
	queries := []string{
		`CREATE TABLE IF NOT EXISTS role (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			code VARCHAR(50) NOT NULL,
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS _user (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			first_name VARCHAR(50) NOT NULL,
			last_name VARCHAR(50) NOT NULL,
			middle_name VARCHAR(50),
			login VARCHAR(30) NOT NULL UNIQUE,
			email VARCHAR(50) NOT NULL UNIQUE,
			password_hash VARCHAR NOT NULL,
			role_id BIGINT REFERENCES role(id)
		)`,
		`CREATE TABLE IF NOT EXISTS category (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			category_code VARCHAR(50) NOT NULL,
			description TEXT,
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS inventory (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			quantity INT NOT NULL,
			description TEXT,
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS product (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			product_name VARCHAR(100) NOT NULL,
			category_id BIGINT REFERENCES category(id),
			inventory_id BIGINT REFERENCES inventory(id),
			price DOUBLE PRECISION NOT NULL CHECK (price > 0),
			description TEXT NOT NULL,
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS user_payment (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			user_id BIGINT REFERENCES _user(id),
			payment_type VARCHAR(255),
			provider VARCHAR(255),
			account_no VARCHAR(255),
			expiry DATE NOT NULL,
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS payment_status (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			name VARCHAR(255),
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS cart_item (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			user_id BIGINT REFERENCES _user(id),
			product_id BIGINT REFERENCES product(id),
			quantity INT,
			total_price DOUBLE PRECISION NOT NULL CHECK (total_price >= 0)
		)`,
		`CREATE TABLE IF NOT EXISTS _order (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			user_id BIGINT REFERENCES _user(id),
			product_id BIGINT REFERENCES product(id),
			quantity INT,
			total_price DOUBLE PRECISION NOT NULL CHECK (total_price > 0),
			deleted BOOLEAN DEFAULT FALSE
		)`,
		`CREATE TABLE IF NOT EXISTS payment_details (
			id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
			order_id BIGINT REFERENCES _order(id),
			payment_id BIGINT REFERENCES user_payment(id),
			status_id BIGINT REFERENCES payment_status(id),
			deleted BOOLEAN DEFAULT FALSE
		)`,
	}

	for _, query := range queries {
		_, err := dbPool.Exec(context.Background(), query)
		if err != nil {
			log.Fatalf("Failed to execute query: %v", err)
		}
	}

	log.Println("Tables created or already exist.")
}
